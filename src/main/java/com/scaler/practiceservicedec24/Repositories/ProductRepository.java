package com.scaler.practiceservicedec24.Repositories;

import com.scaler.practiceservicedec24.Models.Category;
import com.scaler.practiceservicedec24.Models.Products;
import com.scaler.practiceservicedec24.Projections.ProductWithIdAndPriceProjection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ProductRepository extends JpaRepository<Products, Long> {
    @Override
    List<Products> findAll();

    @Override
    Page<Products> findAll(Pageable pageable);

    Products save(Products products);

    @Override
    Optional<Products> findById(Long id);

    List<Products>findByCategory(Category category);

    List<Products> findAllByCategory_Title(String title);
    List<Products> findByCategory_Id(Long categoryId);

    List<Products> findByTitleStartingWithAndIdEqualsAndPriceLessThan(String title, Long id, Double price);
    // All the above queries can be generated by JPA
    // Below one is a complex and query needs to be provided by us using
    // 1) HQL  2) Native SQL

    @Query("select p.id, p.price from Products p where p.category.title = :categoryName")
    List<ProductWithIdAndPriceProjection> getProductWithTitleAndPriceAndGivenCategory(@Param("categoryName") String categoryName);

    @Query(value = "select * from Products p where p.title = :title", nativeQuery = true)
    List<ProductWithIdAndPriceProjection> getIdAndPricesOfAllProductsWithGivenTitle(@Param("title") String title);
}
